= コンフリクト・マネジメントについて

== そもそもの話

まず、本章に関係ある範囲で簡単に自己紹介させて頂くと、当時の私はSIerで受諾開発をもりもりやっておりました。なお、現職はそこから離れて久しいです。

　

前職で、とある先輩に「君はどうもコンフリクトが起きがちなので、
コンフリクト・マネジメントについて調べてみたらいいんじゃない？」とアドバイスをもらったことがあり、
そのときにそんな用語や概念があるのか…… という知見を得たのですが、その後そういう方向で頭を打つ前に
転職しちゃった事もあって、結構気にはなっていたのですが、改めて深堀りする機会がありません
でした。

　

ちょうど今回執筆の機会を頂きましたので、そういえばこんなネタあったな…… と思って色々調べつつ、知見に関してアウトプットしてみる事にしました。

== いわゆるコンフリクトとは

まず用語の定義をしらべるためググってみました。

グロービス経営大学院のサイトには、コンフリクトについて次のように@<fn>{conflict}書いてありました。 

//footnote[conflict][https://mba.globis.ac.jp/about_mba/glossary/detail-11812.html]

　

「コンフリクトとは、相反する意見、態度、要求などが存在し、互いに譲らずに緊張状態が生じること。対立、軋轢。」

　

定義をみただけだと、実例がわからずイメージが湧きづらいですね。具体的な例で見てみましょう。

たとえば昨今、業務システム界隈だとDevOpsなんて単語がバズワードになりました。

　

ソフトウェア開発における大前提として、ソフトウェアの価値をユーザーに提供するまでに、まずソフトウェアを開発（開発チーム＝Dev）し、
そのソフトウェアを適切に運用（運用チーム＝Ops）する必要があります。

　

このDevとOpsには利害関係が必ず生じます。
たとえばソフトウェアに機能不足な内容や、ユーザビリティを損なう内容があったとして、Dev側は改修することでユーザ価値を高めることができますが、
逆にOps側はソフトを変更することで安定稼働が損なわれるリスクが発生します。改修に伴うパフォーマンスやセキュリティなどの付随する影響もあるかもしれません。

　

このように何らかのアプローチを行った場合、表だって見えないこともあるのですが、必ずどこかにコンフリクトが大なり小なり発生しているはずです。
（何らかのアプローチを行った際、必ず何らかのリソースが別のリソースに転換はされているはずで、それを好意的に見る人と問題と見る人は必ず居る筈なので。）

== コンフリクト・マネジメントについて

前項でコンフリクトの発生について述べましたが、本来そのままではネガティブな意味合いになってしまうコンフリクトを逆に組織の活性化や成長・コミュニケーションの機会と捉え、
積極的に受け入れて問題解決を図ろうとする考え方の事を「コンフリクト・マネジメント」と呼ぶそうです。

　

組織運営において（大なり小なりではありますが）頻繁に発生するコンフリクトを積極的に活用することで、
組織内のコミュニケーションや、人間関係が強固になり、組織が強靭になったり、
異なる意見をすり合わせて一つの方向にまとめ、集約していく過程で新たな着想、アイデアを得られたり、
組織にとって多くのメリットが期待できるようです。

== 実際のITに関する現場で起きがちなやつ（QCDのバランスに関する件）

ソフトウェアの開発に限らず、プロダクト開発では一般的に「QCDの何かを優先すると、他の何かが確保できなくなる二律背反性がある」と言われています。

　

文章でさらっと要点を書きましたが、わかりにくいかもしれませんので
具体的にそれぞれの項目についてまずは説明します。

 * Quality：品質
 * Cost：コスト
 * Delivery：デリバリー（納期）

たとえば、品質を上げよう（バグのより少ないソフトウェアを作って出荷しよう）とすると、
テストをより多く網羅的に行う必要があり、開発コストが多くなります。

　

また、たとえば3ヶ月後が納品日であるプロダクトがあり、これを納期を縮めて2ヶ月で納品してほしい(Deliveryの変更)と言われた場合、
これを実現するためには、品質を下げる（開発スコープを減らして品質低下で対応する事がベストですが、現場によってはテストを削ったりしますね…… ＾＾；）

　

私が具体的に過去に経験してきたケースをもとにして、架空のプロジェクトを次に例示してみましょう。

=== 例1：機能追加要望
受諾開発の現場で、開発案件を対応している最中に、ユーザー側のシステム担当者と現場担当者での
打ち合わせの結果、新たな機能追加要望が顧客から出てきました。

　

プロジェクトマネージャーや管理職は、プロジェクトや会社の利益を上げることが仕事なので、機能追加要望を請けたいと考えていますが、
開発現場のスタッフに相談したところ、反発を受けました。（単に機能を追加するだけだったので。）

==== ※解説

実際の現場などでも、開発現場はブルックスの法則@<fn>{Man-Month}などもあるため、コスト（人員）を増やして対応する場合、対応コスト以上に
現場が疲弊しがちであり、機能追加などの要望は嫌がられる事が多いです。

　

ただプロジェクトマネージャーや管理職の人はプロジェクトの結果として利益を上げる事が仕事であり、
加えて開発スタッフより権限が強い事が一般的なため、コンフリクトが発生しがちです。

//footnote[Man-Month][https://ja.wikipedia.org/wiki/ブルックスの法則]

=== 例2：納期変更（延期）
現場にて反発を受けたことから、プロジェクトマネージャーはユーザー側のシステム担当者と相談し、
納期を後ろにずらして調整する事としました。

　

その内容で、開発現場のスタッフに再度相談したところ、それであれば開発スタッフでも許容できるという事になり、コンフリクトが解消、
そのままプロジェクトを続けることになりました。

==== ※解説

このような調整は現場でもよくあり、今回の場合はQ（納品する時の機能）を増やす(＋方向)事に対して
C（機能追加に伴う追加コストが発生）を増やし（三角形でいうとコストが増えているため、－方向）、
更にD（納期を伸ばした）を増やした（三角形でいうと納期が後ろに倒れているため、－方向）事でバランスが取れる状態となっています。

=== 例3：手戻りの発生

新機能も含めて開発を進めていったところ、追加する予定としていた新機能の前工程において、品質が悪く、大量の手戻りが発生することがわかりました。

　

このため、プロジェクトマネージャーと開発スタッフで相談した結果、その開発スタッフの担当する作業スコープを減らし、他の開発スタッフにて開発を巻きとってもらう事になりました。
今回はコンフリクトは発生せず、無事、機能を追加して納品することができました。

==== ※解説

今回の場合はC（機能追加に伴う追加コストが発生）を増やし（三角形でいうとコストが増えているため、－方向）
Q（納品する時の機能）は変えず、
更にD（納期：納品物）を減らした（三角形でいうと納品対象が減っているため、+方向）事でバランスが取れる状態となっています。

== おわりに

本章ではコンフリクト・マネジメントについて簡単に紹介しました。（半分ぐらいはQCDのバランスの話ですが。）

世代間や立場、発注者と顧客などさまざまなギャップがある組織において、問題を抱えている方は、コンフリクト・マネジメントについて学んでみると
解決の糸口が見いだせるかもしれませんね。

